Go的错误机制
    与其他主要编程语言的差异
    1. 没有异常机制
    2. error类型实现了error接口
        type error interface {
            Error() string
        }
    3. 可以通过errors.New来快速创建错误实例
        errors.New("n must be in the range [0,10]")


最佳实践
    尽早失败，避免嵌套！
        假如结构是没有错误就继续执行另一个方法func，但func仍可能会抛出异常，则会形成嵌套的结构。
    这种时候可以改写成判断有错误就抛出，并Log. emmmmmm，这个在其他的语言应该也是很常见的方式了。


panic
    panic用于不可以恢复的错误
    panic退出前会执行defer的内容

panic vs. os.Exit
    os.Exit 退出时不会调用defer指定的函数的.(划重点)
    os.Exit 退出时不输出当前调用栈信息


recover
    defer func() {
        if err := recover(); err != nil {
            //恢复错误,recover会获取抛出的err.
        }
    }()

    //Ps:感觉有些像Catch.

    最常见的"错误恢复"，这种方式其实是很危险的，代码如下:
    defer func() {
        if err := recover(); err != nil {
            log.Error("recoverd panic", err)
        }
    }()
    当心 recover 成为恶魔
        形成僵尸服务进程，导致health check失效
        "Let it Crash!"往往是我们恢复不确定性错误的最好方法。
            就让它崩溃，然后利用守护进程重启.