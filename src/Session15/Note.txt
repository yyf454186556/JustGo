GoPath相关
    1.可以在cmd中使用go env命令查看GoPath，也可以直接在环境变量中查看并更改
    2.注意Go在寻找包时会在对应的GoPath/src/目录下寻找，即会默认的在GoPath后添加一个src，因此需要注意代码的目录结构。
        commit d5dd9da522b23d0bafe87711dcf4afd2fe167434 就是做了这个的更新.


package
    1.基本复用模块单元
        以首字母大写来表明可以被包以外访问
    2.代码的package可以和所在的目录不一致
    3.同一目录里的Go代码的package要保持一致

init方法
    在main被执行前，所有依赖package的init方法都会被执行
    不同包的init函数按照包导入的依赖关系决定执行顺序，这里Go语言会帮助我们处理
    每个包可以有多个init函数
    包的每个源文件也可以有多个init函数，这点比较特殊

第三方包的导入
    命令go get -u "第三方包的github地址", -u会使得一直使用最新版本的第三方包
    注意导入的包的地址，不要前面的 "https://" 和末尾的 ".git"
    例如完整地址是 https://github.com/easierway/concurrent_map.git
    实际使用是  go get github.com/easierway/concurrent_map

    注意代码在GitHub上的组织形式，以适应go get 直接以代码路径开始，不要有src.(笔者注：这里应该是指第三方包，不要包含src，这样go get拉下来就可以直接使用了)


Go未解决的依赖问题
    1.同一环境下，不同项目使用同一包的不同版本
    2.无法管理对包的特定版本的依赖

Vendor路径
    随着Go 1.5 release版本的发布，vendor目录被添加到除了GOPATH和GOROOT之外的依赖项目查找的解决方案。在Go1.6之前，你需要手动的设置环境变量

    查找依赖包路径的解决方案如下：
    1.当前包下的vendor目录
    2.向上级目录查找，直到找到src下的vendor目录
    3.在GOPATH下面查找依赖包
    4.在GOROOT目录下查找

常用的依赖管理工具
    godep, glide, dep等等 (github上有)
