关于Go是不是面向对象语言其实有很多争论，关于给出的解释是：Yes and no.

封装数据和行为
    结构体定义
    type Employee struct {
        Id string
        Name string
        Age int
    }

    实例创建及初始化
    e := Employee{"0", "Bob", 20}
    e1 := Employee{Name: "Mike", Age: 30}
    e2 := new(Employee) //注意这里返回的引用/指针, 相当于 e:= &Employee{}
    e2.Id = "2" //与其他主要编程语言的差异：通过实例的指针访问成员不需要使用->
    e2.Age = 22
    e2.Name = "Rose"

    行为(方法)的定义
        //第一种定义方式在市里对应方法被调用时，实例的成员会进行值复制
        func (e Employee) String() string {
            return fmt.Sprintf("ID:%s-Name:%s-Age:%d", e.Id, e.Name, e.Age)
        }

        //第二种通常情况下为了避免内存拷贝我们使用第二种定义方式
        func (e *Employee) String() string {
            return fmt.Sprintf("ID:%s/Name:%s/Age:%d", e.Id, e.Name, e.Age)
        }


Duck Type式接口实现
    接口定义
    type Programmer interface {
        WriteHelloWorld() Code
    }

    接口实现
    type GoProgrammer struct {
    }

    func (p *GoProgrammer) WriteHelloWorld() Code {
        return "fmt.Println(\"Hello World!\")"
    }


Go接口
    与其他主要编程语言的差异
    1. 接口为非入侵性的，实现不依赖于接口的定义
    2. 所以接口的定义可以包含在接口使用者包内


接口变量
    var prog Coder = &GoProgrammer{}
    // 以上prog是接口Coder的一个变量

    当prog被初始化之后它有两部分

    prog
                type GoProgrammer stuct {  //类型
    类型  -->   }

    数据  -->   &GoProgrammer{}            //具体的实现


自定义类型
    1. type IntConvertionFn func(n int) int
    2. type MyPoint int

Go语言中接口的实现是不依赖于接口的定义的，是采用DockType的方式
